package lesson2.hw;

import java.io.PrintWriter;
import java.util.Scanner;

/**
 * Алгоритмы_и_структуры_данных_на_Java.БазовыйКурс. 24.09.2019 Webinar.
 * Teacher: Фанзиль Кусяпкулов
 * Урок 1. Общие сведения об алгоритмах и структурах данных
 * Домашняя работа.
 * @author Litvinenko Yuriy
 * Задачи на http://acmp.ru
 * Тема. Бинарный поиск.
 * ЗАДАЧА №523. Роман в томах (Время: 1 сек. Память: 16 Мб Сложность: 41%)
 * В романе N глав. В i-той главе ai страниц. Требуется издать роман в K томах так, чтобы объем
 * самого «толстого» тома был минимален. В каждом томе главы располагаются по порядку своих номеров.
 * Требуется написать программу, которая найдет количество страниц в самом «толстом» томе.
 * Входные данные:
 * Входной текстовый файл INPUT.TXT содержит в первой строке число N - количество глав (1 ≤ N ≤ 100).
 * Во второй строке через пробел записаны N чисел – количество страниц в каждой главе.
 * Количество страниц в романе не превышает 32767. В третьей строке записано число K (1 ≤ K ≤ N) -
 * количество томов(Из комментария: может оказаться и меньше K?).
 * Выходные данные:
 * Выходной файл OUTPUT.TXT должен содержать количество страниц в самом «толстом» томе.
 * Примеры:
 * 3        >> 3
 * 1 2 1
 * 2
 * 4        >> 2
 * 1 2 1 1
 * 3
 * Формализованная задача.
 * Принять длину массива. Инициировать массив для количества страниц в каждой главе.
 * Принять значения и наполнить массив глав.
 * Суммировать все страницы в романе, пролистав массив.
 * Acmp0523
 */
public class Acmp0523 {
    public static void main(String[] args){
        new Task0523().run();
    }
}

class Task0523 {
    private Scanner in = new Scanner(System.in);
    private PrintWriter out = new PrintWriter(System.out);
    private int width;//Ширина диплома
    private int height;//Высота диплома
    private int number;//Количество дипломов
    private long size;//размер квадрата(размер стороны)

    void run() {
        //Принимаем ширину диплома
        width = in.nextInt();
        //Принимаем высоту диплома
        height = in.nextInt();
        //Принимаем количество дипломов
        number = in.nextInt();

        //TODO временно
        out.println("The calculating has started... please wait.");
        out.flush();

        //Находим размер требуемого квадрата в зависимости от расположения листов
        if(width < height){
            //расположение - Книга
            size = findSize(width, height, number);
        } else{
            //расположение - Альбом
            size = findSize(height, width, number);
        }

        out.println(size);
        out.flush();
    }

    /**
     * Метод нахождения минимального размера стороны квадрата, для размещения требуемого количества дипломов
     * @param lesser - размер минимальной стороны диплома
     * @param larger - размер максимальной стороны диплома
     * @param number - количество дипломов
     * @return минимальный размер стороны квадрата, для размещения требуемого количества дипломов
     */
    private long findSize(int lesser, int larger, int number){
        //Запоминаем минимально возможный размер квадрата(с большим запасом)
        long minSize = -1;
        //Запоминаем максимально возможный размер квадрата(с большим запасом)
        long maxSize = larger * (Math.round(Math.sqrt(number) + 1));
        //Объявляем переменную для средней значения
        long middleSize;

        //***Бинарный поиск***
        //крутим цикл пока не сблизим края поиска до одного элемента
        while(maxSize - minSize != 1){
            //устанавливаем на середине диапазона
            middleSize = minSize + (maxSize - minSize) / 2;
            //если возможно вместить number коров в стенд размером middleSize
            if(isCorrect(number, lesser, larger, middleSize)){
                //minSize всегда должна указывать на ситуацию, когда условие выполняется
                minSize = middleSize;
            } else {
                //maxSize всегда должна указывать на ситуацию, когда условие не выполняется
                maxSize = middleSize;
            }
        }
        //если была найдена хотя бы одна комбинация
        if(minSize >= 0){
            //возвращаем минимальный размер квадрата, на котором возможно разместить дипломы
            return maxSize;
        }
        //если нет - -1
        return -1;
    }

    /**
     * Метод проверки возможно ли разместить number дипломов в квадрате размером хотя бы verifiedSize
     * @param lesser - размер минимальной стороны диплома
     * @param larger - размер максимальной стороны диплома
     * @param number - заданное количество коров
     * @param verifiedSize - проверяемое значение возможного размера квадрата стенда
     * @return true - номер текущей коровы не меньше общего количества коров(значит все вместились)
     */
    private boolean isCorrect(int number, int lesser, int larger, long verifiedSize){
        //устанавливаем значение счетчика дипломов
        long currentNumber = 1;
        //рассчитываем количество дипломов в ряду(по минимальному размеру)
        long lesserNumber = verifiedSize / lesser;
        //рассчитываем количество дипломов в колонке(по максимальному размеру)
        long largerNumber = verifiedSize / larger;

        //вычислем общее количество дипломов, которых возможно разместить в квадрате стенда
        currentNumber = lesserNumber * largerNumber;

        //если текущее значение дипломов не меньше их количества, возвращаем true
        return currentNumber < number;
    }

}