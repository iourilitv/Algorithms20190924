package lesson2.hw.acmp;

import java.io.PrintWriter;
import java.util.Scanner;

/**
 * Алгоритмы_и_структуры_данных_на_Java.БазовыйКурс. 24.09.2019 Webinar.
 * Teacher: Фанзиль Кусяпкулов
 * Урок 1. Общие сведения об алгоритмах и структурах данных
 * Домашняя работа.
 * @author Litvinenko Yuriy
 * Задачи на http://acmp.ru
 * Тема. Бинарный поиск.
 * ЗАДАЧА №712. Дипломы (Время: 1 сек. Память: 16 Мб Сложность: 28%)
 * Когда Петя учился в школе, он часто участвовал в олимпиадах по информатике, математике и физике.
 * Так как он был достаточно способным мальчиком и усердно учился, то на многих из этих олимпиад он
 * получал дипломы. К окончанию школы у него накопилось n дипломов, причем, как оказалось, все они
 * имели одинаковые размеры: w – в ширину и h – в высоту.
 * Сейчас Петя учится в одном из лучших российских университетов и живет в общежитии со своими
 * одногруппниками. Он решил украсить свою комнату, повесив на одну из стен свои дипломы за школьные
 * олимпиады. Так как к бетонной стене прикрепить дипломы достаточно трудно, то он решил купить
 * специальную доску из пробкового дерева, чтобы прикрепить ее к стене, а к ней – дипломы.
 * Для того чтобы эта конструкция выглядела более красиво, Петя хочет, чтобы доска была квадратной
 * и занимала как можно меньше места на стене. Каждый диплом должен быть размещен строго в
 * прямоугольнике размером w на h. Прямоугольники, соответствующие различным дипломам, не должны
 * иметь общих внутренних точек.
 * Требуется написать программу, которая вычислит минимальный размер стороны доски, которая
 * потребуется Пете для размещения всех своих дипломов.
 * Входные данные:
 * Входной файл INPUT.TXT содержит три целых числа: w, h, n (1 ≤ w, h, n ≤ 10^9).
 * Выходные данные:
 * В выходной файл OUTPUT.TXT выведите ответ на задачу.
 * Примеры:
 * 1 1 1    >> 1
 * 2 3 10   >> 9
 * Пример расстановки 10 дипломов 2х3 в квадрате 9х9:
 * Формализованная задача.
 * Найти размер стороны квадрата, на которой могут быть размещены все дипломы, но при этом имеет
 * минимально возможную площадь.
 * Определить диапазон поиска:
 * мин.значение = 0, максимальное - бОльшая сторона диплома * количество дипломов.
 * Определить условие:
 * 1. Варианты компоновки:
 *  a) Книга - ширина меньше высоты.
 *  Строка(ряд). Проверяем по ширине - сторона квадрата(size) / ширину(w).
 *  Колонка. Проверяем по высоте - сторона квадрата(size) / высоту(h).
 *  b) Альбом - высота меньше ширины. Обратно варианту Книга.
 * 2. проверяемое количество дипломов, которых возможно разместить на стенде должно быть
 * меньше заданного количества дипломов.
 * В бинарном поиске найти значение удовлетворяющее условию.
 * Задача решается аналогично задаче Angry cows - поиском по результату.
 */
public class Acmp0712 {
    public static void main(String[] args){
        new Task0712().run();
    }
}

class Task0712 {
    private Scanner in = new Scanner(System.in);
    private PrintWriter out = new PrintWriter(System.out);
    private int width;//Ширина диплома
    private int height;//Высота диплома
    private int number;//Количество дипломов
    private long size;//размер квадрата(размер стороны)

    void run() {
        //Принимаем ширину диплома
        width = in.nextInt();
        //Принимаем высоту диплома
        height = in.nextInt();
        //Принимаем количество дипломов
        number = in.nextInt();

        //TODO временно
        out.println("The calculating has started... please wait.");
        out.flush();

        //Находим размер требуемого квадрата в зависимости от расположения листов
        if(width < height){
            //расположение - Книга
            size = findSize(width, height, number);
        } else{
            //расположение - Альбом
            size = findSize(height, width, number);
        }

        out.println(size);
        out.flush();
    }

    /**
     * Метод нахождения минимального размера стороны квадрата, для размещения требуемого количества дипломов
     * @param lesser - размер минимальной стороны диплома
     * @param larger - размер максимальной стороны диплома
     * @param number - количество дипломов
     * @return минимальный размер стороны квадрата, для размещения требуемого количества дипломов
     */
    private long findSize(int lesser, int larger, int number){
        //Запоминаем минимально возможный размер квадрата(с большим запасом)
        long minSize = -1;
        //Запоминаем максимально возможный размер квадрата(с большим запасом)
        long maxSize = larger * (Math.round(Math.sqrt(number) + 1));
        //Объявляем переменную для средней значения
        long middleSize;

        //***Бинарный поиск***
        //крутим цикл пока не сблизим края поиска до одного элемента
        while(maxSize - minSize != 1){
            //устанавливаем на середине диапазона
            middleSize = minSize + (maxSize - minSize) / 2;
            //если возможно вместить number дипломов в стенд размером middleSize
            if(isCorrect(number, lesser, larger, middleSize)){
                //minSize всегда должна указывать на ситуацию, когда условие выполняется
                minSize = middleSize;
            } else {
                //maxSize всегда должна указывать на ситуацию, когда условие не выполняется
                maxSize = middleSize;
            }
        }
        //если была найдена хотя бы одна комбинация
        if(minSize >= 0){
            //возвращаем минимальный размер квадрата, на котором возможно разместить дипломы
            return maxSize;
        }
        //если нет - -1
        return -1;
    }

    /**
     * Метод проверки возможно ли разместить number дипломов в квадрате размером хотя бы verifiedSize
     * @param lesser - размер минимальной стороны диплома
     * @param larger - размер максимальной стороны диплома
     * @param number - заданное количество коров
     * @param verifiedSize - проверяемое значение возможного размера квадрата стенда
     * @return true - проверяемое значение размера стороны квадрата меньше количества дипломов
     */
    private boolean isCorrect(int number, int lesser, int larger, long verifiedSize){
        //устанавливаем значение счетчика дипломов
        long currentNumber = 1;
        //рассчитываем количество дипломов в ряду(по минимальному размеру)
        long lesserNumber = verifiedSize / lesser;
        //рассчитываем количество дипломов в колонке(по максимальному размеру)
        long largerNumber = verifiedSize / larger;

        //вычислем общее количество дипломов, которых возможно разместить в квадрате стенда
        currentNumber = lesserNumber * largerNumber;

        //если текущее значение дипломов не меньше их количества, возвращаем true
        return currentNumber < number;
    }

}